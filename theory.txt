1. What is emmet ?

Emmet is a built-in feature of VS Code. 
Emmet uses different abbreviations and short expressions depending on what’s passed, and then dynamically converts the abbreviations into the full code.
Emmet is mostly used for HTML, XML, and CSS, but it can also be used with programming languages.
------------------------------>

2. Difference between a library and framework ?

Both libraries and frameworks are reusable code written by someone else.
A library is like going to Ikea. You already have a home, but you need a bit of help with furniture. You don’t feel like making your own table from scratch. Ikea allows you to pick and choose different things to go in your home. You are in control.
A framework, on the other hand, is like building a model home. You have a set of blueprints and a few limited choices when it comes to architecture and design. Ultimately, the contractor and blueprint are in control. And they will let you know when and where you can provide your input.
When you use a library, you are in charge of the flow of the application. You are choosing when and where to call the library. When you use a framework, the framework is in charge of the flow. It provides some places for you to plug in your code, but it calls the code you plugged in as needed.
----------------------------------->

What is CDN ? Why do we use it ?

A content delivery network (CDN) is a geographically dispersed network of servers and data centers.
The goal of CDN is to facilitate increased web performance and high availability by locating web content copies closer to the end-users.
------------------------------------>

Why is React known as React ?

It was developed by Facebook, and the name “React” was chosen because it is meant to help developers build user interfaces that are fast and responsive, or “reactive.” 
The library was designed to “react” to changes in data.
------------------------------------->

What is cross-origin in the script tag ?

The crossorigin attribute sets the mode of the request to an HTTP CORS Request.
Web pages often make requests to load resources on other servers. Here is where CORS comes in.
A cross-origin request is a request for a resource (e.g. style sheets, iframes, images, fonts, or scripts) from another domain.
------------------------------------->

What is the difference between React and ReactDOM ?

React library is responsible for creating views and ReactDOM library is responsible to actually render UI in the browser.
------------------------------------>

What is difference between react.development.js and react.production.js files via CDN ?

The React library provides two versions of its JavaScript files: react.development.js and react.production.js. These files serve different purposes and are typically used in different stages of the development and deployment process. When serving these files via a Content Delivery Network (CDN), there are a few key differences between them:
In development mode, we can enable and utilize React developer tools, devtools profiler, debugging environment attached with source code. We can utilize various functionalities such as Hot Module Replacement, diagnostics so that development environment will help to debug code.
In production mode, compression and minification of Javascript and other resources happens to reduce size of the code which is not the case when it comes to development mode. Performance will be much faster in production mode when compared to development mode.
------------------------------>

What are async and defer ?




EPISODE-02 -------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. What is 'NPM' ?
=> 'NPM' is a package manager where all the libraries are hosted, and we can use it to download those libraries which we need in our app in the form of dependencies.

2. What is 'Parcel/Webpack' ? Why do we need it ?
=>  'Parcel/Webpack' are what we call module bundlers for our Javascript code. A bundler is a tool used to merge your code into a single file. 
They are used for optimizing our react application by performing various optimization tasks for us which includes,
- Creating Dev Build
- Creating Local Server
- Hot Module Replacement
- File Watching Algorithm
- Provides Caching - Faster Builds
- Performs Image Optimization
- Minification
- Bundling
- Compressing
- Consistent Hashing
- Code Splitting
- Differential Bundling - to support older browsers
- Diagnostics
- Error Handling
- Ability to host app on HTTPS
- Tree Shaking - remove unused code
- Different dev and production bundles

3. What is '.parcel-cache' ?
=> '.parcel-cache' is a folder which parcel creates while building our app and it stores/caches the information about our app in it. The benefit of it is that when parcel rebuilds our application, it uses these cached data and it doesn't need to re-parse everything. It makes our build creating process fast.

4. What is 'npx' ?
=> While 'npm' is used to install the packages, 'npx' is the command we use to run those packages. We can use npx command to even execute packages which are not even installed locally.

5. What is the difference between 'dependencies' and 'devDependencies' ?
=> 'dependencies' are the packages which we need for our app to run everywhere including dev and production environment. 'devDependencies' on the other hand are the dependencies which we need only while developing our app and will not be needed on the production environment.

6. What is Tree Shaking ?
=> Tree Shaking is a type of optimization where the unused code is removed from our build. For react app, module bundlers like parcel do this kind of optimization for us.

7. What is Hot Module Replacement ?
=> Hot Module Replacement (or HMR) is one of the most useful features offered by module bundlers like webpack/parcel. It allows all kinds of modules to be updated at runtime without the need for a full refresh. Parcel does so by using a File Watching Algorithm which is written in C++.

8. List down your favorite 5 superpowers of Parcel and describe any 3 of them in your own words.
=> Parcel provides us with a lot of superpowers which make our application optimized and fast. Below are some of the superpowers of parcel,
    1. Minification - Parcel gives us a superpower of Code Minification, which means optimizing code to save space, reduce page load times, and lower website bandwidth usage.

    2. Bundling - Parcel gives us the ability to bundle our code files. Bundling is a process of following imported files and merging them into a single file: a “bundle”. This bundle can then be included on a webpage to load an entire app at once.

    3. Hot Module Replacement - Hot Module Replacement (or HMR) is one of the most useful features offered by module bundlers like webpack/parcel. It allows all kinds of modules to be updated at runtime without the need for a full refresh. Parcel does so by using a File Watching Algorithm which is written in C++.

    4. Caching - Parcel caches our app data at the time of build. It creates a folder named '.parcel-cache' where it stores/caches the information about our app in it. The benefit of it is that when parcel rebuilds our application, it uses these cached data and it doesn't need to re-parse everything. It makes our build creating process fast.

    5. Tree Shaking - Parcel also provides us with Tree Shaking feature which means all the unused code in our application is removed from our code automatically.

9. What is '.gitignore' ? What should we add and not add in it ?
=> A .gitignore file is a plain text file that contains a list of all the specified files and folders from the project that Git should ignore and not track. Inside .gitignore , you can tell Git to ignore only a single file or a single folder by mentioning the name or pattern of that specific file or folder.
We should add files/folders to gitignore which can be auto-generated by running commands like npm install. For eg. node_modules, dist and .parcel-cache folder.
We should not add files/folders which are necessary for our app and it's configuration and which are required to generate our dependencies and builds. For eg. package.json and package-lock.json.

10. Why should I not modify 'package-lock.json' file ?
=> The reason being that it is a generated file and is not designed to be manually edited. Its purpose is to track the entire tree of dependencies (including dependencies of dependencies) and the exact version of each dependency. We should commit package-lock. json to our code repository.

11. What is 'node_modules' ? Is it a good idea to push that on git ?
=> The node_modules folder contains all the saved JavaScript dependencies of a project. It contains our app's own dependencies as well as all the Transitive dependencies too.
Since this folder often has a massive size, we should not commit it inside the Git repository.

12. What is the 'dist' folder ?
=> The /dist stands for distributable folder. The /dist folder contains the minimized version of the source code. The code present in the /dist folder is actually the code which is used on production web applications.

13. What is 'browserslist' ?
=> Browserslist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file. The browserslist configuration controls the outputted JavaScript so that the emitted code will be compatible with the browsers specified.



Episode 3 ----------------------------------------------------------------

1. What is JSX ?
=> JSX is a syntax extension to JavaScript. It allows us to write HTML-like or XML-like code in our React applications which makes it more readable, understandable and maintainable.
JSX ultimately gets transpiled to React.createElement, which is nothing but a JavaScript object and which gets converted to HTML element when it gets rendered to the DOM.

2. Superpowers of JSX
=> JSX is not necessary for writing React code, but it makes our React development much easier. It allows us to write HTML-like or XML-like code in our React applications, instead of React.createElement and it makes our code more readable, understandable and maintainable.

3. Role of 'type' attribute in the script tag ? What options can I use there ?
=> This attribute indicates the type of script represented. The value of this attribute will be one of the following:

    a. Attribute is not set (default), an empty string, or a JavaScript MIME type
        Indicates that the script is a "classic script", containing JavaScript code. Authors are encouraged to omit the attribute if the script refers to JavaScript code rather than specify a MIME type. JavaScript MIME types are listed in the IANA media types specification.

    b. module
        This value causes the code to be treated as a JavaScript module. The processing of the script contents is deferred. The charset and defer attributes have no effect. For information on using module, see our JavaScript modules guide. Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.

    c. importmap
        This value indicates that the body of the element contains an import map. The import map is a JSON object that developers can use to control how the browser resolves module specifiers when importing JavaScript modules.

    d. Any other value
        The embedded content is treated as a data block, and won't be processed by the browser. Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks. All of the other attributes will be ignored, including the src attribute.

4. {TitleComponent} vs <TitleComponent /> vs <TitleComponent></TitleComponent> in JSX
=> {TitleComponent} : This means that {TitleComponent} is a variable that returns React elements.
{} : This means that it is a Functional component which is just a normal javascript function that returns some JSX.
{} : This is equivalent to {} when the component does not have any Child Component. The opening and closing tags are used to include Child component.


Episode 4---------------------------------------------------------
